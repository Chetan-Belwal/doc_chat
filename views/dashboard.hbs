<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DocuChat AI</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .page {
            display: none;
            width: 100%;
            animation: fadeIn 0.5s ease-in-out;
        }

        .page.active {
            display: block;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Landing Page */
        .landing-page {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 24px;
            padding: 60px 40px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 3rem;
            font-weight: 800;
            color: white;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 40px;
            line-height: 1.6;
        }

        .cta-button {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 16px 32px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(238, 90, 36, 0.3);
        }

        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 40px rgba(238, 90, 36, 0.4);
        }

        /* Upload Page */
        .upload-page {
            background: white;
            border-radius: 24px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 0 auto;
        }

        .upload-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .upload-header h2 {
            font-size: 2rem;
            color: #333;
            margin-bottom: 10px;
        }

        .upload-area {
            border: 3px dashed #667eea;
            border-radius: 16px;
            padding: 60px 20px;
            text-align: center;
            background: rgba(102, 126, 234, 0.05);
            transition: all 0.3s ease;
            cursor: pointer;
            margin-bottom: 30px;
        }

        .upload-area:hover {
            border-color: #5a6fd8;
            background: rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .upload-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2rem;
        }

        .upload-text {
            font-size: 1.2rem;
            color: #667eea;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .upload-subtext {
            color: #999;
            font-size: 0.9rem;
        }

        .file-input {
            display: none;
        }

        .uploaded-file {
            background: #f8f9ff;
            border: 1px solid #e1e8ff;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .file-info {
            display: flex;
            align-items: center;
        }

        .file-icon {
            width: 40px;
            height: 40px;
            background: #667eea;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            margin-right: 15px;
        }

        .continue-button {
            background: #667eea;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

        .continue-button:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }

        /* Chat Page */
        .chat-page {
            background: white;
            border-radius: 24px;
            height: 90vh;
            max-width: 1000px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-title {
            display: flex;
            align-items: center;
        }

        .chat-title h3 {
            font-size: 1.3rem;
            margin-left: 10px;
        }

        .document-info {
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            backdrop-filter: blur(10px);
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
            background: #f8f9ff;
        }

        .message {
            margin-bottom: 20px;
            display: flex;
            align-items: flex-start;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-content {
            max-width: 70%;
            padding: 16px 20px;
            border-radius: 18px;
            position: relative;
        }

        .message.user .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message.ai .message-content {
            background: white;
            border: 1px solid #e1e8ff;
            color: #333;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin: 0 12px;
        }

        .message.user .message-avatar {
            background: #667eea;
            color: white;
            order: 1;
        }

        .message.ai .message-avatar {
            background: #f0f2ff;
            color: #667eea;
        }

        .chat-input {
            padding: 20px 30px;
            border-top: 1px solid #e1e8ff;
            background: white;
        }

        .input-container {
            display: flex;
            align-items: center;
            background: #f8f9ff;
            border-radius: 25px;
            padding: 8px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .input-container:focus-within {
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
        }

        .message-input {
            flex: 1;
            border: none;
            outline: none;
            padding: 12px 20px;
            background: transparent;
            font-size: 1rem;
        }

        .send-button {
            background: #667eea;
            color: white;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .send-button:hover {
            background: #5a6fd8;
            transform: scale(1.05);
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            background: white;
            border: 1px solid #e1e8ff;
            border-radius: 18px;
            border-bottom-left-radius: 4px;
            max-width: 70%;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #667eea;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {

            0%,
            60%,
            100% {
                transform: translateY(0);
                opacity: 0.3;
            }

            30% {
                transform: translateY(-10px);
                opacity: 1;
            }
        }

        .back-button {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .back-button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .landing-page {
                padding: 40px 20px;
            }

            .upload-page {
                padding: 30px 20px;
            }

            .chat-page {
                height: 95vh;
                border-radius: 16px;
            }

            .message-content {
                max-width: 85%;
            }

            .chat-header {
                padding: 15px 20px;
            }

            .chat-messages {
                padding: 20px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Landing Page -->
        <div id="landing" class="page active">
            <div class="landing-page">
                <div class="logo">📚 DocuChat AI</div>
                <p class="subtitle">
                    Transform your documents into interactive conversations.<br>
                    Upload any document and chat with an AI that understands your content.
                </p>
                <button class="cta-button" onclick="showPage('upload')">
                    Get Started →
                </button>
            </div>
        </div>

        <!-- Upload Page -->
        <div id="upload" class="page">
            <div class="upload-page">
                <div class="upload-header">
                    <h2>Upload Your Document</h2>
                    <p style="color: #666; margin-top: 10px;">
                        Supported formats: PDF, DOC, DOCX, TXT, MD
                    </p>
                </div>

                <form id="uploadForm" enctype="multipart/form-data" action="/document/upload" method="POST">
                    <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                        <div class="upload-icon">📄</div>
                        <div class="upload-text">Drop your document here</div>
                        <div class="upload-subtext">or click to browse files</div>
                    </div>

                    <input type="file" id="fileInput" name="document" class="file-input"
                        accept=".pdf" onchange="handleFileSelect(event)" required>

                    <div id="uploadedFile" class="uploaded-file" style="display: none;">
                        <div class="file-info">
                            <div class="file-icon">📄</div>
                            <div>
                                <div id="fileName" style="font-weight: 600; color: #333;"></div>
                                <div id="fileSize" style="font-size: 0.9rem; color: #666;"></div>
                            </div>
                        </div>
                        <button type="button" onclick="removeFile()"
                            style="background: none; border: none; color: #999; cursor: pointer; font-size: 1.2rem;">×</button>
                    </div>

                    <button type="submit" class="continue-button" id="continueBtn" disabled style="opacity: 0.5;">
                        Start Chatting with Your Document
                    </button>
                </form>

                <div style="text-align: center; margin-top: 20px;">
                    <button type="button" class="back-button" onclick="showPage('landing')"
                        style="background: #f0f2ff; color: #667eea;">
                        ← Back to Home
                    </button>
                </div>
            </div>
        </div>

        <!-- Chat Page -->
        {{#if isSubmitRedirect}}
        <script>    
            setTimeout(function () {
                showPage('chat');
            }, 100);
        </script>
        {{/if}}
        <div id="chat" class="page">
            <div class="chat-page">
                <div class="chat-header">
                    <div class="chat-title">
                        <span>🤖</span>
                        <h3>Chat with Your Document</h3>
                    </div>
                    <div class="document-info" id="docInfo">
                        📄 document.pdf
                    </div>
                    <button class="back-button" onclick="showPage('upload')">
                        ← New Document
                    </button>
                </div>

                <div class="chat-messages" id="chatMessages">
                    <div class="message ai">
                        <div class="message-avatar">AI</div>
                        <div class="message-content">
                            Hello! I've analyzed your document and I'm ready to help. You can ask me questions about the
                            content, request summaries, or discuss specific topics mentioned in your document. What
                            would you like to know?
                        </div>
                    </div>
                </div>

                <div class="chat-input">
                    <form id="chatForm" onsubmit="handleChatSubmit(event)">
                        <div class="input-container">
                            <input type="text" name="message" class="message-input" id="messageInput"
                                placeholder="Ask me anything about your document..." required>
                            <button type="submit" class="send-button">
                                <span>→</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentFile = null;
        let chatHistory = [];

        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                currentFile = file;
                document.getElementById('fileName').textContent = file.name;
                document.getElementById('fileSize').textContent = formatFileSize(file.size);
                document.getElementById('uploadedFile').style.display = 'flex';
                document.getElementById('continueBtn').disabled = false;
                document.getElementById('continueBtn').style.opacity = '1';
            }
        }

        function removeFile() {
            currentFile = null;
            document.getElementById('uploadedFile').style.display = 'none';
            document.getElementById('continueBtn').disabled = true;
            document.getElementById('continueBtn').style.opacity = '0.5';
            document.getElementById('fileInput').value = '';
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        async function handleChatSubmit(event) {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(event.target);
            const message = formData.get('message').trim();

            if (!message) return;

            // Clear the input
            event.target.reset();

            // Add user message to chat
            addMessage(message, 'user');

            // Show typing indicator
            showTypingIndicator();

            try {
                // Prepare chat data
                const chatData = {
                    message: message,
                    documentId: window.documentId,
                    timestamp: new Date().toISOString(),
                    sessionId: window.sessionId || generateSessionId()
                };

                // Send message to AI backend
                const response = await sendChatMessageForm(chatData);

                hideTypingIndicator();

                if (response.success) {
                    addMessage(response.message, 'ai');
                } else {
                    throw new Error(response.error || 'Failed to get AI response');
                }
            } catch (error) {
                hideTypingIndicator();
                addMessage('Sorry, I encountered an error. Please try again.', 'ai');
                console.error('Chat error:', error);
            }
        }

        function addMessage(content, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;

            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? 'You' : 'AI';

            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.textContent = content;

            messageDiv.appendChild(avatar);
            messageDiv.appendChild(messageContent);
            messagesContainer.appendChild(messageDiv);

            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            // Store in history
            chatHistory.push({ content, sender, timestamp: new Date() });
        }

        function showTypingIndicator() {
            const messagesContainer = document.getElementById('chatMessages');
            const typingDiv = document.createElement('div');
            typingDiv.className = 'message ai';
            typingDiv.id = 'typingIndicator';

            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = 'AI';

            const typingContent = document.createElement('div');
            typingContent.className = 'typing-indicator';
            typingContent.innerHTML = `
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
                <span style="margin-left: 10px; color: #666;">AI is thinking...</span>
            `;

            typingDiv.appendChild(avatar);
            typingDiv.appendChild(typingContent);
            messagesContainer.appendChild(typingDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function hideTypingIndicator() {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }


        // Generate unique session ID
        function generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        // Upload document using FormData from form submission
        async function uploadDocumentForm(formData) {
            try {
                const response = await fetch(`${API_BASE_URL}/upload-document`, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Accept': 'application/json'
                        // Don't set Content-Type - browser will set it with boundary for FormData
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                return result;
            } catch (error) {
                console.error('Upload error:', error);
                return { success: false, error: error.message };
            }
        }

        // Send chat message using structured data
        async function sendChatMessageForm(chatData) {
            try {
                const response = await fetch(`${API_BASE_URL}/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(chatData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                return result;
            } catch (error) {
                console.error('Chat error:', error);
                return { success: false, error: error.message };
            }
        }

        // Initialize chat with existing history
        async function initializeChat() {
            if (window.documentId) {
                try {
                    const historyResult = await loadChatHistory(window.documentId);

                    if (historyResult.success && historyResult.messages) {
                        // Clear existing messages except welcome message
                        const messagesContainer = document.getElementById('chatMessages');
                        const welcomeMessage = messagesContainer.querySelector('.message.ai');
                        messagesContainer.innerHTML = '';
                        messagesContainer.appendChild(welcomeMessage);

                        // Add historical messages
                        historyResult.messages.forEach(msg => {
                            addMessage(msg.content, msg.sender, false); // false = don't scroll
                        });

                        // Scroll to bottom after all messages are added
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }
                } catch (error) {
                    console.error('Failed to load chat history:', error);
                }
            }
        }

        // Focus input when chat page becomes active
        document.addEventListener('DOMContentLoaded', function () {
            const observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.target.classList.contains('active') && mutation.target.id === 'chat') {
                        setTimeout(() => {
                            document.getElementById('messageInput').focus();
                        }, 100);
                    }
                });
            });

            document.querySelectorAll('.page').forEach(page => {
                observer.observe(page, {
                    attributes: true,
                    attributeFilter: ['class']
                });
            });
        });
    </script>
</body>

</html>